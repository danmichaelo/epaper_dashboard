esphome:
  name: epaper_dashboard
  friendly_name: E-paper Dashboard
  on_boot:
      priority: 200.0
      then:
        - component.update: epaper_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
              # Wait a bit longer so all the items are received
        - delay: 5s
        - logger.log: "Initial sensor data received: Refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret home_assistant_api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

sensor:
  # Create sensors for monitoring Weatherman remotely.
  - platform: template
    name: "E-paper - Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update

font:
  - id: font_title
    size: 50
    file: 'fonts/Dknanuk-q6G6.ttf'
    # glyphs: [' ', '-', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C']
  - id: font_bold
    file: 'fonts/GothamBold.ttf'
    size: 40
    # glyphs: ['W', 'E', 'A', 'T', 'H', 'R', 'L', 'I', 'N', ' ']
  - id: font_normal_bold
    file: 'fonts/Alegreya-Medium.ttf'
    size: 40

# Define colors
# This design is white on black so this is necessary.
color:
  - id: color_bg
    red: 0%
    green: 0%
    blue: 0%
    white: 0%
  - id: color_text
    red: 0%
    green: 0%
    blue: 0%
    white: 100%

# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

# Script for updating screen - Refresh display and publish refresh count and time. (Thanks @paviro!)
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - component.update: epaper_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

# Check whether the display needs to be refreshed every minute,
# based on whether new data is received or motion is detected. (Thanks @paviro!)
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                lambda: 'return id(data_updated) == true;'
              then:
                - logger.log: "Sensor data updated: Refreshing display..."
                - script.execute: update_screen
                # - if:
                #     condition:
                #       binary_sensor.is_on: motion_detected
                #     then:
                #       - logger.log: "Sensor data updated and activity in home detected: Refreshing display..."
                #       - script.execute: update_screen
                #     else:
                #       - logger.log: "Sensor data updated but no activity in home - skipping display refresh."
              else:
                - logger.log: "No sensors updated - skipping display refresh."

# Pins for Waveshare ePaper ESP32 Driver Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

display:
  - id: epaper_display
    platform: waveshare_epaper
    model: 7.50in-bV3
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    reset_duration: 2ms
    rotation: 270°
    update_interval: never  # we update manually instead of periodically
    lambda: |-
      // Show loading screen before data is received.
      if (id(initial_data_received) == false) {
        it.printf(240, 390, id(font_normal_bold), color_text, TextAlign::TOP_CENTER, "WAITING FOR DATA...");
      } else {
        it.print(30, 30, id(font_title), "Hello");
        it.print(30, 90, id(font_bold), "world!");
      }

captive_portal: